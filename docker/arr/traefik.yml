services:
  # Traefik 3 - Reverse Proxy
  traefik:
    container_name: traefik
    image: traefik:3.0
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    profiles: ["core", "all"]
    depends_on:
      - socket-proxy
    networks:
      t3_proxy:
        # ipv4_address: ${MEDIA_SERVER_IP:-10.10.100.50} # You can specify a static IP
      socket_proxy:
    command: # CLI arguments
      ###### API ######
      - --api=true
      - --api.dashboard=true
      - --api.debug=true
      - --api.disabledashboardad=true
      - --api.insecure=true

     ###### Certificate Resolvers Configuration ######
      - --certificiateresolvers.cloudflare-dns=true
      - --certificatesresolvers.cloudflare-dns.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory # LetsEncrypt Staging Server
      # - --certificatesresolvers.cloudflare-dns.acme.caserver=https://acme-v02.api.letsencrypt.org/directory
      - --certificatesresolvers.cloudflare-dns.acme.dnschallenge=true
      - --certificatesResolvers.cloudflare-dns.acme.dnsChallenge.delayBeforeCheck=90 # To delay DNS check and reduce LE hitrate
      - --certificatesresolvers.cloudflare-dns.acme.dnschallenge.provider=cloudflare
      - --certificatesResolvers.cloudflare-dns.acme.dnsChallenge.resolvers=1.1.1.1:53,1.0.0.1:53
      - --certificatesresolvers.cloudflare-dns.acme.email=${CLOUDFLARE_EMAIL}
      - --certificatesresolvers.cloudflare-dns.acme.storage=acme.json

      ###### Entry Points ######
      - --entrypoints.web.address=:80
      - --entrypoints.web.http.redirections.entrypoint.to=websecure
      - --entrypoints.web.http.redirections.entrypoint.scheme=https

      - --entrypoints.websecure.address=:443
      # Allow these IPs to set the X-Forwarded-* headers - Cloudflare IPs: https://www.cloudflare.com/ips/
      # - --entrypoints.websecure.forwardedHeaders.trustedIPs=$CLOUDFLARE_IPS,$LOCAL_IPS
      # - --entrypoints.websecure.http.tls=true

      - --entryPoints.metrics.address=:8082

      ###### Servers Transport ######
      - --serversTransport.insecureSkipVerify=true

      ###### Global Configuration ######
      - --global.checkNewVersion=false
      - --global.sendAnonymousUsage=false

      ###### Log Configuration ######
      - --log=true
      - --log.level=INFO # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC

      ###### Access Log Configuration ######
      - --accessLog=true
      - --accessLog.bufferingSize=100 # Configuring a buffer of 100 lines
      - --accessLog.filters.statusCodes=204-299,400-499,500-599

      ###### Providers Configuration ######
      - --providers.docker=true
      - --providers.docker.allowemptyservices=false
      - --providers.docker.endpoint=unix:///var/run/docker.sock # Disable for Socket Proxy. Enable otherwise.
      # - --providers.docker.endpoint=tcp://socket-proxy:2375 # Enable for Socket Proxy. Disable otherwise.
      - --providers.docker.exposedbydefault=true
      - --providers.docker.httpclienttimeout=0
      - --providers.docker.network=t3_proxy
      - --providers.docker.watch=true

      - --providers.file.directory=/rules # Load dynamic configuration from one or more .toml or .yml files in a directory
      - --providers.file.watch=true

      ###### Metrics Configuration ######
      - --metrics.prometheus=true
      - --metrics.prometheus.addentrypointslabels=true
      - --metrics.prometheus.addrouterslabels=true
      - --metrics.prometheus.addserviceslabels=true
      - --metrics.prometheus.buckets=0.1,0.3,1.2,5.0
      - --metrics.prometheus.entryPoint=metrics
    healthcheck:
     test: ["CMD", "traefik", "healthcheck", "--ping"]
     interval: 5s
     retries: 3
    ports:
      - target: 80
        published: "80"
        protocol: tcp
        mode: host
      - target: 443
        published: "443"
        protocol: tcp
        mode: host
      - target: 8080
        published: "8088"
        protocol: tcp
        mode: host
    volumes:
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
        read_only: true
        bind:
          create_host_path: true
      - type: bind
        source: /etc/localtime
        target: /etc/localtime
        read_only: true
        bind:
          create_host_path: true
      - type: bind
        source: $DOCKERDIR/appdata/traefik3
        target: /rules
        bind:
          create_host_path: true
      - type: bind
        source: ${COMMON_CONFIG_PATH}/traefik3/letsencrypt/acme.json
        target: /acme.json
        bind:
          create_host_path: true
    secrets:
      - cf_dns_api_token
      - basic_auth_credentials
    environment:
      TZ: ${TZ:-Etc/UTC}
      CF_DNS_API_TOKEN_FILE: /run/secrets/cf_dns_api_token
      CLOUDFLARE_EMAIL: ${CLOUDFLARE_EMAIL:-me@gmail.com}
      HTPASSWD_FILE: /run/secrets/basic_auth_credentials # HTTP Basic Auth Credentials
      DOMAINNAME_HS: ${DOMAINNAME_HS:-mydomain.com} # Passing the domain name to traefik container to be able to use the variable in rules.
    labels:
      - "traefik.enable=true"
      # - "traefik.http.routers.traefik.entrypoints=web"
      # - "traefik.http.routers.traefik.rule=Host(`traefik.$DOMAINNAME_HS`)"
      - "traefik.http.middlewares.traefik-auth.basicauth.usersfile=/run/secrets/basic_auth_credentials"
      # - "traefik.http.middlewares.traefik-https-redirect.redirectscheme.scheme=https"
      # - "traefik.http.middlewares.sslheader.headers.customrequestheaders.X-Forwarded-Proto=https"
      # - "traefik.http.routers.traefik.middlewares=traefik-https-redirect"
      - "traefik.http.routers.traefik-secure.entrypoints=websecure"
      - "traefik.http.routers.traefik-secure.rule=Host(`traefik.$DOMAINNAME_HS`)"
      - "traefik.http.routers.traefik-secure.middlewares=traefik-auth"
      # - "traefik.http.routers.traefik-secure.tls=true"
      # - "traefik.http.routers.traefik-secure.tls.certresolver=cloudflare"
      # - "traefik.http.routers.traefik-secure.tls.domains[0].main=$DOMAINNAME_HS"
      # - "traefik.http.routers.traefik-secure.tls.domains[0].sans=*.$DOMAINNAME_HS"
      - "traefik.http.routers.traefik-secure.service=api@internal"
      # - "traefik.http.services.api@internal.loadbalancer.server.port=80"
      # - "traefik.docker.network=t3_proxy"

      # # Services - API
      # # - "traefik.http.routers.traefik-secure-rtr.middlewares=test-auth"
      # # Healthcheck/ping
      # #- "traefik.http.routers.ping.rule=Host(`traefik.$DOMAINNAME_HS`) && Path(`/ping`)"
      # #- "traefik.http.routers.ping.tls=true"
      # #- "traefik.http.routers.ping.service=ping@internal"
      # # - traefik.http.routers.traefik-secure-rtr.tls.certresolver=cloudflare-dns"
      # # Middlewares
      # # - "traefik.http.routers.traefik-secure-rtr.middlewares=chain-no-auth@file" # For No Authentication
      # # - "traefik.http.routers.traefik-secure-rtr.middlewares=chain-basic-auth@file" # For Basic HTTP Authentication
      # # - "traefik.http.routers.traefik-secure-rtr.middlewares=chain-oauth@file" # For Google OAuth
      # #- "traefik.http.routers.traefik-secure-rtr.middlewares=chain-authelia@file" # For Authelia Authentication

