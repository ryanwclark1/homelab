services:

  postgresql:
    container_name: postgresql
    image: docker.io/library/postgres:${POSTGRES_TAG:-16.3}
    restart: unless-stopped
    profiles: ["core", "all"]
    healthcheck:
      # test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      test: ["CMD-SHELL", "pg_isready -d $${AUTHENTIK_PG_DB} -U $${AUTHENTIK_PG_USER}"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${AUTHENTIK_PG_PWD:?database password required}
      POSTGRES_USER: ${AUTHENTIK_PG_USER:-authentik}
      POSTGRES_DB: ${AUTHENTIK_PG_DB:-authentik}
    networks:
      t3_proxy:

  redis:
    container_name: redis
    image: docker.io/library/redis:${REDIS_TAG:-7.2-alpine}
    command: --save 60 1 --loglevel warning
    restart: unless-stopped
    profiles: ["core", "all"]
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    volumes:
      - redis_data:/data
    networks:
      t3_proxy:

  server:
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2024.6.1}
    container_name: authentik_server
    restart: unless-stopped
    profiles: ["core", "all"]
    command: server
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${AUTHENTIK_PG_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${AUTHENTIK_PG_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${AUTHENTIK_PG_PWD:?database password required}
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY:-password}
      AUTHENTIK_EMAIL__HOST: ${AUTHENTIK_EMAIL_HOST:-localhost}
      AUTHENTIK_EMAIL__PORT: ${AUTHENTIK_EMAIL_PORT:-25}
      AUTHENTIK_EMAIL__USERNAME: ${AUTHENTIK_EMAIL_USERNAME:-username}
      AUTHENTIK_EMAIL__PASSWORD: ${AUTHENTIK_EMAIL_PASSWORD:-password}
      AUTHENTIK_EMAIL__USE_TLS: ${AUTHENTIK_EMAIL_USE_TLS:-false}
      AUTHENTIK_EMAIL__USE_SSL: ${AUTHENTIK_EMAIL_USE_SSL:-false}
      AUTHENTIK_EMAIL__TIMEOUT: ${AUTHENTIK_EMAIL_TIMEOUT:-10}
      AUTHENTIK_EMAIL__FROM: ${AUTHENTIK_EMAIL_FROM:-authentik@localhost}
    volumes:
      - ${COMMON_CONFIG_PATH}/authentik/media:/media
      - ${COMMON_CONFIG_PATH}/authentik/custom-templates:/templates
    depends_on:
      - postgresql
      - redis
    networks:
      t3_proxy:
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.authentik.entrypoints=http"
      - "traefik.http.routers.authentik.rule=Host(`authentik.$DOMAINNAME_HS`)"
      - "traefik.http.middlewares.authentik-https-redirect.redirectscheme.scheme=https"
      - "traefik.http.routers.authentik.middlewares=authentik-https-redirect"
      - "traefik.http.routers.authentik-secure.entrypoints=https"
      - "traefik.http.routers.authentik-secure.rule=Host(`authentik.$DOMAINNAME_HS`)"
      - "traefik.http.routers.authentik-secure.tls=true"
      - "traefik.http.routers.authentik-secure.service=authentik"
      - "traefik.http.services.authentik.loadbalancer.server.scheme=https"
      # - "traefik.http.services.authentik.loadbalancer.server.port=9443"
      - "traefik.http.services.authentik.loadbalancer.server.port=9000"
      - "traefik.docker.network=t3_proxy"

  worker:
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2024.6.1}
    container_name: authentik_worker
    restart: unless-stopped
    profiles: ["core", "all"]
    command: worker
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${AUTHENTIK_PG_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${AUTHENTIK_PG_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${AUTHENTIK_PG_PWD:?database password required}
    # `user: root` and the docker socket volume are optional.
    # See more for the docker socket integration here:
    # https://goauthentik.io/docs/outposts/integrations/docker
    # Removing `user: root` also prevents the worker from fixing the permissions
    # on the mounted folders, so when removing this make sure the folders have the correct UID/GID
    # (1000:1000 by default)
    # user: root
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${COMMON_CONFIG_PATH}/authentik/media:/media
      - ${COMMON_CONFIG_PATH}/authentik/certs:/certs
      - ${COMMON_CONFIG_PATH}/authentik/custom-templates:/templates
    depends_on:
      - postgresql
      - redis
    networks:
      t3_proxy:

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local